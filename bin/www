#!/usr/bin/env node
'use strict';

// This file is the entry point of the web service

// Npm dependencies
require('newrelic');
var http = require('http');

// My js dependencies
var app = require('../server/app');
var logger = require('../util/logger');
var dbs = require('../db/common');
var scheduler = require('../server/scheduler');

// Log the environment mode that node is in
logger.log('info', 'running node in ' + process.env.NODE_ENV + ' mode');

// Set up the backend dbs used by the web server
// NOTE: Do not set up the postgresql db. Let the schedule do that at a later time.
// This prevents unwanted rate limiting at application startup due to a burst of queued facebook data
// TODO dynamo db

// DEBUG
// dbs.setUpPostgre();

// Set up the scheduler
scheduler();

// Set up the port
var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

// Create the HTTP web server
var server = http.createServer(app);

// Listen on the provided port
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalizes the port into a string or number
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for the HTTP web server's "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.log('error', bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.log('error', bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    logger.log('info', 'Listening on ' + bind);
}
